<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smalltalk on 夜行人</title>
    <link>http://wwj718.github.io/categories/smalltalk/</link>
    <description>Recent content in Smalltalk on 夜行人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://wwj718.github.io/categories/smalltalk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一篇用动态媒介写的文章</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/how-morphic-works/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/how-morphic-works/</guid>
      <description>如果嵌入和查看方法提供得足够好，作为媒介本身看待的计算机可以是所有其他媒介。 &amp;ndash; Alan Kay 前言 近期重读 An Introduction to Morphic 的时候，发现 Morphic 中用于自动布局的类 AlignmentMorph 已经</description>
    </item>
    
    <item>
      <title>[译] Morphic 的工作原理</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/how-morphic-works/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/how-morphic-works/</guid>
      <description>前言 近期重读 An introdution to Morphic, 本文翻译自其中的部分章节。 Morphic 是我最喜欢的 UI 框架, An introdution to Morphic 则是我最喜欢的 Morphic 教程，教程的作者正好也是 Morphic 的设计者: John Malon</description>
    </item>
    
    <item>
      <title>[译] Morphic 背后的设计原则</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-morphic/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-morphic/</guid>
      <description>前言 近期重读 An introdution to Morphic, 本文翻译自其中的部分章节。 Morphic 是我最喜欢的 UI 框架, An introdution to Morphic 则是我最喜欢的 Morphic 教程，教程的作者正好也是 Morphic 的设计者: John Malon</description>
    </item>
    
    <item>
      <title>[译]Smalltalk背后的设计原则</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-smalltalk/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-smalltalk/</guid>
      <description>前言 Design Principles Behind Smalltalk是我最喜欢的两篇Smalltalk文章之一，另一篇是The Early History Of Smalltalk。 前者来自Daniel Inga</description>
    </item>
    
    <item>
      <title>Smalltalk与Scratch</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-scratch/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-scratch/</guid>
      <description>在squeak wiki上读到Scratch的词条。 它向我揭示了许多疑惑已久的问题: 项目的灵感、设计的理念的来源是什么？ 翻译过来，做个备忘。 以</description>
    </item>
    
    <item>
      <title>命令行Smalltalk</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-shell/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-shell/</guid>
      <description>命令行不是正途 正如维基百科提到的: Smalltalk和许多程序设计语言不同，它不仅仅是一门语言&amp;hellip;Smalltalk带有一个应用</description>
    </item>
    
  </channel>
</rss>
