<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smalltalk on 夜行人</title>
    <link>http://wwj718.github.io/tags/smalltalk/</link>
    <description>Recent content in Smalltalk on 夜行人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://wwj718.github.io/tags/smalltalk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]Lisp、Smalltalk 和对称性的力量</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/lisp-smalltalk-and-the-power-of-symmetry/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/lisp-smalltalk-and-the-power-of-symmetry/</guid>
      <description>前言 原文: Lisp, Smalltalk, and the Power of Symmetry 译文 和许多黑客一样，我第一门真正爱上的编程语言是 Lisp。保罗·格雷厄姆（Paul Graham）激发了我对这种语言的</description>
    </item>
    
    <item>
      <title>个人计算论文集</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/personal-computing-papers/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/personal-computing-papers/</guid>
      <description>前言 打算长期阅读「个人计算」相关的论文，对于一些特别喜欢的，会顺手做个翻译。今晚原本打算翻译 Kay - The Real Computer Revolution Hasn’t Happened Yet.pdf, 在 Google 一搜，发现Con</description>
    </item>
    
    <item>
      <title>[译]计算机软件</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/computer-software/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/computer-software/</guid>
      <description>原文 Computer Software &amp;ndash; Alan Kay 译文 提出一个关于使计算机听命于人所需的概念和技术的单一主题问题(single-topic issue)。它是赋予可编程机器以形式</description>
    </item>
    
    <item>
      <title>[译]个人计算</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/personal-computing/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/personal-computing/</guid>
      <description>原文 Personal Computing &amp;ndash; Alan Kay 1975 提醒: 阅读原文需注意 18-19、20-21 页装订反了. 译文 简介 想象一下，在一个普通笔记本大小的便携包装中，拥有一台你自己的知</description>
    </item>
    
    <item>
      <title>[译]软件: 艺术，工程，数学还是科学？</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/software-art-engineering-mathematics-or-science/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/software-art-engineering-mathematics-or-science/</guid>
      <description>原文 Software: Art, Engineering, Mathematics, or Science? by Alan Kay 译文 建造一座 500 英尺高的埃及金字塔，花了几十万工人几十年的时间。他们将材料一块块堆在一起，然后用石灰岩做外墙，使其光滑。</description>
    </item>
    
    <item>
      <title>组建 Dynaverse 工作室(备忘录)</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/dynaverse-studio/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/dynaverse-studio/</guid>
      <description>差不多把 Croquet 相关的论文都读完了。这是迄今为止我所知道的与 Metaverse 有关最疯狂/伟大的想法。 开始着手组建有能力追逐这些目标的团队。 最近在读《游戏引擎架构</description>
    </item>
    
    <item>
      <title>[译]Croquet: 一个协作系统架构</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/croqueta-collaboration-system-architecture/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/croqueta-collaboration-system-architecture/</guid>
      <description>前言 Croquet – A Collaboration System Architecture 可能是 Croquet 话题下，最重要的一篇论文，Bret Victor将其收录在 worrydream refs。 另一份重要的材料是 《Croquet Programming 1.0B》。</description>
    </item>
    
    <item>
      <title>我的世界(Minecraft)</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/minecraft/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/minecraft/</guid>
      <description>前言 Hanson 初中刚毕业，这个假期时间多，他在网上租了一台 Linux 服务器，在里边架设了一个 Minecraft 服务器，并邀请20多个朋友加入 McLab 小组。周末的晚上，他邀请我加入</description>
    </item>
    
    <item>
      <title>从消息和可扩展性的角度看待 Jupyter</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/jupyter-message-extension-viewpoint/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/jupyter-message-extension-viewpoint/</guid>
      <description>你不会理解某个事物，除非你从某个角度上理解了它们 &amp;ndash; 马文·明斯基 《心智社会》 Point of View Is Worth 80 IQ Points &amp;ndash; Alan Kay 前言 我是 Jupyter 的老用户。 一路追随它从 IPython 演进到 Jupyter, Jupyter(Notebook)</description>
    </item>
    
    <item>
      <title>Smalltalk 入门导览</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-guide/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-guide/</guid>
      <description>我最近从 Pharo 切到 Squeak，它们都是 Smalltalk 的现代实现。Pharo 派生自 Squeak。 有几位 Smalltalk-80 的实现者(他们之前在施乐实验室创造了 Smalltal</description>
    </item>
    
    <item>
      <title>[译]与鱼共游 -- Smalltalk中的编程体验</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/swimming-with-the-fish/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/swimming-with-the-fish/</guid>
      <description>前言 原文见Swimming with the Fish。 这个英文标题让人想起「与狼共舞」（Dances with Wolves），于是我准备采用类似的结构 &amp;ndash; 与鱼共游，</description>
    </item>
    
    <item>
      <title>热闹的愚蠢</title>
      <link>http://wwj718.github.io/post/%E9%9A%8F%E7%AC%94/lively-but-stupid/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E9%9A%8F%E7%AC%94/lively-but-stupid/</guid>
      <description>Daniel Ingalls在《Smalltalk背后的设计原则》开篇里说“Smalltalk项目的目标是为所有人的创新精神提供计算机支持” 接着他着手论</description>
    </item>
    
    <item>
      <title>[译]Smalltalk背后的设计原则</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-smalltalk/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/design-principles-behind-smalltalk/</guid>
      <description>前言 Design Principles Behind Smalltalk是我最喜欢的两篇Smalltalk文章之一，另一篇是The Early History Of Smalltalk。 前者来自Daniel Inga</description>
    </item>
    
    <item>
      <title>Smalltalk与Scratch</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-scratch/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-scratch/</guid>
      <description>在squeak wiki上读到Scratch的词条。 它向我揭示了许多疑惑已久的问题: 项目的灵感、设计的理念的来源是什么？ 翻译过来，做个备忘。 以</description>
    </item>
    
    <item>
      <title>命令行Smalltalk</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-shell/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/smalltalk-shell/</guid>
      <description>命令行不是正途 正如维基百科提到的: Smalltalk和许多程序设计语言不同，它不仅仅是一门语言&amp;hellip;Smalltalk带有一个应用</description>
    </item>
    
    <item>
      <title>Pharo IoT</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/pharo-iot/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/pharo-iot/</guid>
      <description>前言 IoT 近期写了几篇IoT相关的文章: 使用Blynk打造一款物联网产品 CodeLab ❤️ IoT 物联网相关开源项目整理 物联网、开源硬件与开源社区 因为沉迷于Pha</description>
    </item>
    
    <item>
      <title>Pharo使用笔记之http、websocket与mqtt</title>
      <link>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/pharo-http-websocket-mqtt/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wwj718.github.io/post/%E7%BC%96%E7%A8%8B/pharo-http-websocket-mqtt/</guid>
      <description>前言 Smalltalk提供了绝佳的可探索的沉浸式编程环境(live)，这是一种&amp;quot;红药丸&amp;quot;，一旦尝试就再也回不去了。于是决</description>
    </item>
    
  </channel>
</rss>
